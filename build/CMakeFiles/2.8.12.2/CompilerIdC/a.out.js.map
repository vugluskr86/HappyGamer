{"version":3,"file":"a.out.js","sources":["CMakeCCompilerId.c"],"names":[],"mappingssourcesContent":["#ifdef __cplusplus\n# error \"A C++ compiler has been selected for C.\"\n#endif\n\n/* Version number components: V=Version, R=Revision, P=Patch\n   Version date components:   YYYY=Year, MM=Month,   DD=Day  */\n\n#if defined(__18CXX)\n# define ID_VOID_MAIN\n#endif\n\n#if defined(__INTEL_COMPILER) || defined(__ICC)\n# define COMPILER_ID \"Intel\"\n  /* __INTEL_COMPILER = VRP */\n# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)\n# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)\n# define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER    % 10)\n# if defined(__INTEL_COMPILER_BUILD_DATE)\n  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */\n#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)\n# endif\n\n#elif defined(__PATHCC__)\n# define COMPILER_ID \"PathScale\"\n# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)\n# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)\n# if defined(__PATHCC_PATCHLEVEL__)\n#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)\n# endif\n\n#elif defined(__clang__)\n# define COMPILER_ID \"Clang\"\n# define COMPILER_VERSION_MAJOR DEC(__clang_major__)\n# define COMPILER_VERSION_MINOR DEC(__clang_minor__)\n# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)\n\n#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)\n# define COMPILER_ID \"Embarcadero\"\n# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)\n# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)\n# define COMPILER_VERSION_PATCH HEX(__CODEGEARC_VERSION__     & 0xFFFF)\n\n#elif defined(__BORLANDC__)\n# define COMPILER_ID \"Borland\"\n  /* __BORLANDC__ = 0xVRR */\n# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)\n# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)\n\n#elif defined(__WATCOMC__)\n# define COMPILER_ID \"Watcom\"\n  /* __WATCOMC__ = VVRR */\n# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)\n# define COMPILER_VERSION_MINOR DEC(__WATCOMC__ % 100)\n\n#elif defined(__SUNPRO_C)\n# define COMPILER_ID \"SunPro\"\n# if __SUNPRO_C >= 0x5100\n   /* __SUNPRO_C = 0xVRRP */\n#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)\n#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)\n#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)\n# else\n   /* __SUNPRO_C = 0xVRP */\n#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)\n#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)\n#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)\n# endif\n\n#elif defined(__HP_cc)\n# define COMPILER_ID \"HP\"\n  /* __HP_cc = VVRRPP */\n# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)\n# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)\n# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)\n\n#elif defined(__DECC)\n# define COMPILER_ID \"Compaq\"\n  /* __DECC_VER = VVRRTPPPP */\n# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)\n# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)\n# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)\n\n#elif defined(__IBMC__)\n# if defined(__COMPILER_VER__)\n#  define COMPILER_ID \"zOS\"\n# else\n#  if __IBMC__ >= 800\n#   define COMPILER_ID \"XL\"\n#  else\n#   define COMPILER_ID \"VisualAge\"\n#  endif\n   /* __IBMC__ = VRP */\n#  define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)\n#  define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)\n#  define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)\n# endif\n\n#elif defined(__PGI)\n# define COMPILER_ID \"PGI\"\n# define COMPILER_VERSION_MAJOR DEC(__PGIC__)\n# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)\n# if defined(__PGIC_PATCHLEVEL__)\n#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)\n# endif\n\n#elif defined(_CRAYC)\n# define COMPILER_ID \"Cray\"\n# define COMPILER_VERSION_MAJOR DEC(_RELEASE)\n# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)\n\n#elif defined(__TI_COMPILER_VERSION__)\n# define COMPILER_ID \"TI\"\n  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */\n# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)\n# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)\n# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)\n\n#elif defined(__TINYC__)\n# define COMPILER_ID \"TinyCC\"\n\n#elif defined(__SCO_VERSION__)\n# define COMPILER_ID \"SCO\"\n\n#elif defined(__GNUC__)\n# define COMPILER_ID \"GNU\"\n# define COMPILER_VERSION_MAJOR DEC(__GNUC__)\n# define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)\n# if defined(__GNUC_PATCHLEVEL__)\n#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)\n# endif\n\n#elif defined(_MSC_VER)\n# define COMPILER_ID \"MSVC\"\n  /* _MSC_VER = VVRR */\n# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)\n# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)\n# if defined(_MSC_FULL_VER)\n#  if _MSC_VER >= 1400\n    /* _MSC_FULL_VER = VVRRPPPPP */\n#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)\n#  else\n    /* _MSC_FULL_VER = VVRRPPPP */\n#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)\n#  endif\n# endif\n# if defined(_MSC_BUILD)\n#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)\n# endif\n\n/* Analog VisualDSP++ >= 4.5.6 */\n#elif defined(__VISUALDSPVERSION__)\n# define COMPILER_ID \"ADSP\"\n  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */\n# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)\n# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)\n# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)\n\n/* Analog VisualDSP++ < 4.5.6 */\n#elif defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)\n# define COMPILER_ID \"ADSP\"\n\n/* IAR Systems compiler for embedded systems.\n   http://www.iar.com */\n#elif defined(__IAR_SYSTEMS_ICC__ ) || defined(__IAR_SYSTEMS_ICC)\n# define COMPILER_ID \"IAR\"\n\n/* sdcc, the small devices C compiler for embedded systems,\n   http://sdcc.sourceforge.net  */\n#elif defined(SDCC)\n# define COMPILER_ID \"SDCC\"\n  /* SDCC = VRP */\n#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)\n#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)\n#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)\n\n#elif defined(_SGI_COMPILER_VERSION) || defined(_COMPILER_VERSION)\n# define COMPILER_ID \"MIPSpro\"\n# if defined(_SGI_COMPILER_VERSION)\n  /* _SGI_COMPILER_VERSION = VRP */\n#  define COMPILER_VERSION_MAJOR DEC(_SGI_COMPILER_VERSION/100)\n#  define COMPILER_VERSION_MINOR DEC(_SGI_COMPILER_VERSION/10 % 10)\n#  define COMPILER_VERSION_PATCH DEC(_SGI_COMPILER_VERSION    % 10)\n# else\n  /* _COMPILER_VERSION = VRP */\n#  define COMPILER_VERSION_MAJOR DEC(_COMPILER_VERSION/100)\n#  define COMPILER_VERSION_MINOR DEC(_COMPILER_VERSION/10 % 10)\n#  define COMPILER_VERSION_PATCH DEC(_COMPILER_VERSION    % 10)\n# endif\n\n/* This compiler is either not known or is too old to define an\n   identification macro.  Try to identify the platform and guess that\n   it is the native compiler.  */\n#elif defined(__sgi)\n# define COMPILER_ID \"MIPSpro\"\n\n#elif defined(__hpux) || defined(__hpua)\n# define COMPILER_ID \"HP\"\n\n#else /* unknown compiler */\n# define COMPILER_ID \"\"\n\n#endif\n\n/* Construct the string literal in pieces to prevent the source from\n   getting matched.  Store it in a pointer rather than an array\n   because some compilers will just produce instructions to fill the\n   array rather than assigning a pointer to a static array.  */\nchar const* info_compiler = \"INFO\" \":\" \"compiler[\" COMPILER_ID \"]\";\n\n/* Identify known platforms by name.  */\n#if defined(__linux) || defined(__linux__) || defined(linux)\n# define PLATFORM_ID \"Linux\"\n\n#elif defined(__CYGWIN__)\n# define PLATFORM_ID \"Cygwin\"\n\n#elif defined(__MINGW32__)\n# define PLATFORM_ID \"MinGW\"\n\n#elif defined(__APPLE__)\n# define PLATFORM_ID \"Darwin\"\n\n#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)\n# define PLATFORM_ID \"Windows\"\n\n#elif defined(__FreeBSD__) || defined(__FreeBSD)\n# define PLATFORM_ID \"FreeBSD\"\n\n#elif defined(__NetBSD__) || defined(__NetBSD)\n# define PLATFORM_ID \"NetBSD\"\n\n#elif defined(__OpenBSD__) || defined(__OPENBSD)\n# define PLATFORM_ID \"OpenBSD\"\n\n#elif defined(__sun) || defined(sun)\n# define PLATFORM_ID \"SunOS\"\n\n#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)\n# define PLATFORM_ID \"AIX\"\n\n#elif defined(__sgi) || defined(__sgi__) || defined(_SGI)\n# define PLATFORM_ID \"IRIX\"\n\n#elif defined(__hpux) || defined(__hpux__)\n# define PLATFORM_ID \"HP-UX\"\n\n#elif defined(__HAIKU__)\n# define PLATFORM_ID \"Haiku\"\n\n#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)\n# define PLATFORM_ID \"BeOS\"\n\n#elif defined(__QNX__) || defined(__QNXNTO__)\n# define PLATFORM_ID \"QNX\"\n\n#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)\n# define PLATFORM_ID \"Tru64\"\n\n#elif defined(__riscos) || defined(__riscos__)\n# define PLATFORM_ID \"RISCos\"\n\n#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)\n# define PLATFORM_ID \"SINIX\"\n\n#elif defined(__UNIX_SV__)\n# define PLATFORM_ID \"UNIX_SV\"\n\n#elif defined(__bsdos__)\n# define PLATFORM_ID \"BSDOS\"\n\n#elif defined(_MPRAS) || defined(MPRAS)\n# define PLATFORM_ID \"MP-RAS\"\n\n#elif defined(__osf) || defined(__osf__)\n# define PLATFORM_ID \"OSF1\"\n\n#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)\n# define PLATFORM_ID \"SCO_SV\"\n\n#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)\n# define PLATFORM_ID \"ULTRIX\"\n\n#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)\n# define PLATFORM_ID \"Xenix\"\n\n#else /* unknown platform */\n# define PLATFORM_ID \"\"\n\n#endif\n\n/* For windows compilers MSVC and Intel we can determine\n   the architecture of the compiler being used.  This is because\n   the compilers do not have flags that can change the architecture,\n   but rather depend on which compiler is being used\n*/\n#if defined(_WIN32) && defined(_MSC_VER)\n# if defined(_M_IA64)\n#  define ARCHITECTURE_ID \"IA64\"\n\n# elif defined(_M_X64) || defined(_M_AMD64)\n#  define ARCHITECTURE_ID \"x64\"\n\n# elif defined(_M_IX86)\n#  define ARCHITECTURE_ID \"X86\"\n\n# elif defined(_M_ARM)\n#  define ARCHITECTURE_ID \"ARM\"\n\n# elif defined(_M_MIPS)\n#  define ARCHITECTURE_ID \"MIPS\"\n\n# elif defined(_M_SH)\n#  define ARCHITECTURE_ID \"SHx\"\n\n# else /* unknown architecture */\n#  define ARCHITECTURE_ID \"\"\n# endif\n\n#else\n#  define ARCHITECTURE_ID \"\"\n#endif\n\n/* Convert integer to decimal digit literals.  */\n#define DEC(n)                   \\\n  ('0' + (((n) / 10000000)%10)), \\\n  ('0' + (((n) / 1000000)%10)),  \\\n  ('0' + (((n) / 100000)%10)),   \\\n  ('0' + (((n) / 10000)%10)),    \\\n  ('0' + (((n) / 1000)%10)),     \\\n  ('0' + (((n) / 100)%10)),      \\\n  ('0' + (((n) / 10)%10)),       \\\n  ('0' +  ((n) % 10))\n\n/* Convert integer to hex digit literals.  */\n#define HEX(n)             \\\n  ('0' + ((n)>>28 & 0xF)), \\\n  ('0' + ((n)>>24 & 0xF)), \\\n  ('0' + ((n)>>20 & 0xF)), \\\n  ('0' + ((n)>>16 & 0xF)), \\\n  ('0' + ((n)>>12 & 0xF)), \\\n  ('0' + ((n)>>8  & 0xF)), \\\n  ('0' + ((n)>>4  & 0xF)), \\\n  ('0' + ((n)     & 0xF))\n\n/* Construct a string literal encoding the version number components. */\n#ifdef COMPILER_VERSION_MAJOR\nchar const info_version[] = {\n  'I', 'N', 'F', 'O', ':',\n  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',\n  COMPILER_VERSION_MAJOR,\n# ifdef COMPILER_VERSION_MINOR\n  '.', COMPILER_VERSION_MINOR,\n#  ifdef COMPILER_VERSION_PATCH\n   '.', COMPILER_VERSION_PATCH,\n#   ifdef COMPILER_VERSION_TWEAK\n    '.', COMPILER_VERSION_TWEAK,\n#   endif\n#  endif\n# endif\n  ']','\\0'};\n#endif\n\n/* Construct the string literal in pieces to prevent the source from\n   getting matched.  Store it in a pointer rather than an array\n   because some compilers will just produce instructions to fill the\n   array rather than assigning a pointer to a static array.  */\nchar const* info_platform = \"INFO\" \":\" \"platform[\" PLATFORM_ID \"]\";\nchar const* info_arch = \"INFO\" \":\" \"arch[\" ARCHITECTURE_ID \"]\";\n\n\n\n/*--------------------------------------------------------------------------*/\n\n#ifdef ID_VOID_MAIN\nvoid main() {}\n#else\nint main(int argc, char* argv[])\n{\n  int require = 0;\n  require += info_compiler[argc];\n  require += info_platform[argc];\n  require += info_arch[argc];\n#ifdef COMPILER_VERSION_MAJOR\n  require += info_version[argc];\n#endif\n  (void)argv;\n  return require;\n}\n#endif\n"]}